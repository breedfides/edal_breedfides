plugins {
  id "com.github.johnrengelman.shadow" version "4.0.4"
  id "com.github.hierynomus.license" version "0.14.0"
  id "net.researchgate.release" version "2.6.0"
  id 'io.codearte.nexus-staging' version '0.12.0'
  id 'org.openjfx.javafxplugin' version '0.0.7'
}

project.ext {
    aspectjVersion = '1.9.3'
    jerseyVersion = '2.27'
    jettyVersion = '9.4.15.v20190215'
    junitVersion = '5.4.0'
}

apply plugin: 'net.researchgate.release'
apply plugin: 'io.codearte.nexus-staging'

allprojects {

	def currentJvm = org.gradle.internal.jvm.Jvm.current().toString()
		
	if(!currentJvm.contains("Oracle")){
		ant.fail('ERROR: Please use an Oracle Java Runtime for the e!DAL-MetaDataAPI')
	}

	apply plugin:'java'
	apply plugin:'maven'
	apply plugin:'signing'
	apply plugin:'com.github.johnrengelman.shadow'
	apply plugin:'com.github.hierynomus.license'
	apply plugin:'org.openjfx.javafxplugin'
	
	repositories {
	    mavenCentral()
	    jcenter()
	    maven {url "https://oss.sonatype.org/content/repositories/snapshots"}
	    maven {url "http://repo.maven.apache.org/maven2"}
	    maven {url "https://maven.eveoh.nl/content/repositories/releases"}
        maven {url "https://plugins.gradle.org/m2/"}
	}
	
	sourceCompatibility = 12
	targetCompatibility = 12
	
	javafx {
	    modules = ['javafx.base','javafx.controls','javafx.web','javafx.swing']
	}
	
	tasks.withType(JavaCompile) {
		options.encoding = 'UTF-8'
	}
	
	javadoc {
    	options.addBooleanOption('html5', true)
	}
	
	test {
	    useJUnit()
      
      	systemProperties['junit.jupiter.execution.parallel.enabled'] = true

  		if(Runtime.runtime.availableProcessors()>=4){
	    	maxParallelForks = Runtime.runtime.availableProcessors()-2
	    }
	    else{
	    	maxParallelForks = Runtime.runtime.availableProcessors()
	    }

	    minHeapSize = "1024m"
	    maxHeapSize = "2048m"
	
	    systemProperties = ["java.security.policy": file("./src/main/resources/de/ipk_gatersleben/bit/bi/edal/primary_data/policy.txt").absolutePath ]
	
	    testLogging.showStandardStreams = true
	    testLogging.exceptionFormat = 'full'
		
		exclude 'de/ipk_gatersleben/bit/bi/edal/test/**'
		exclude 'de/ipk_gatersleben/bit/bi/edal/helper/**'
		exclude 'de/ipk_gatersleben/bit/bi/edal/primary_data/rmi/client/helper/**'
		exclude 'de/ipk_gatersleben/bit/bi/edal/rmi/test/**'
		exclude 'de/ipk_gatersleben/bit/bi/edal/primary_data/rmi/client/test/ClientServerTest*'
		exclude 'de/ipk_gatersleben/bit/bi/edal/primary_data/rmi/client/test/parallel/RmiUploadDownloadOne*'
		exclude 'de/ipk_gatersleben/bit/bi/edal/primary_data/rmi/client/test/parallel/RmiUploadDownloadTwo*'
		
	}
	
	license {
    header rootProject.file('src/main/resources/license.txt')
    strictCheck false
 	ext.year = Calendar.getInstance().get(Calendar.YEAR)
	include "**/*.java"
	exclude "**/*package-info.java"
	}
	
	sourceSets {
        main {
            java {srcDirs=["src/main/java"]}
            resources {srcDirs=["src/main/resources"]}
        }
	}
	
	task javadocJar(type: Jar) {
	 	classifier = 'javadoc'
	    from javadoc
	}

	task sourcesJar(type: Jar) {
	    classifier = 'sources'
	    from sourceSets.main.allSource
	}
	
	shadowJar {
   		classifier = 'jar-with-dependencies'
	}
	
	artifacts {
   		archives javadocJar, sourcesJar, shadowJar
	}

	if(!project.hasProperty('signing.keyId') || !project.hasProperty('signing.password')|| !project.hasProperty('signing.secretKeyRingFile')){   
		println "WARNING: If you want to sign your archives please provide the 'signing.keyId' and 'signing.password' and 'signing.secretKeyRingFile' properties"
	}
	else{
		signing {
		    sign configurations.archives
		}
	}

}

subprojects {
	uploadArchives {
		repositories {
			mavenDeployer {
				if(!project.hasProperty('nexusUsername') || !project.hasProperty('nexusPassword')){   
	            	println "WARNING: If you want to release to Sonatype please provide the 'nexusUsername' and 'nexusPassword' properties"
				}
				else{
				beforeDeployment { 
						MavenDeployment deployment -> signing.signPom(deployment) 
					}
					repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
						authentication(userName: nexusUsername, password: nexusPassword)
						if(project.hasProperty('systemProp.https.proxyHost') && project.hasProperty('systemProp.https.proxyPort')){
							println "INFO: Using system proxy for upload : "+System.properties['https.proxyHost']+":"+System.properties['https.proxyPort']
							proxy(host: System.properties['https.proxyHost'], port: System.properties['https.proxyPort'] as Integer, type: 'http')
						}
					}
					snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
						authentication(userName: nexusUsername, password: nexusPassword)
						if(project.hasProperty('systemProp.https.proxyHost') && project.hasProperty('systemProp.https.proxyPort')){
							println "INFO: Using system proxy for upload : "+System.properties['https.proxyHost']+":"+System.properties['https.proxyPort']
							proxy(host: System.properties['https.proxyHost'], port: System.properties['https.proxyPort'] as Integer, type: 'http')
						}					
					}
				}
				pom.project {
		        name = projectname
		        packaging = 'jar'
		        artifactId = projectname
		        description = projectdescription
		        url = projecturl
	
		        scm {
		          	connection 'scm:git:https://bitbucket.org/ipk_bit_team/electronicdataarchivelibrary.git'
		          	developerConnection 'scm:git:https://bitbucket.org/ipk_bit_team/electronicdataarchivelibrary.git'
		          	url 'https://bitbucket.org/ipk_bit_team/electronicdataarchivelibrary.git'
		        }
	
		        licenses {
		          	license {
		            	name 'Creative Commons Attribution-NoDerivatives 4.0 International (CC BY-ND 4.0)'
		            	url 'http://creativecommons.org/licenses/by-nd/4.0/'
		          	}
		        }
	
		        developers {
			          developer {
			            name 'Daniel Arend'
			            email 'arendd@ipk-gatersleben.de'
			            organization = 'IPK Gatersleben'
			            organizationUrl 'http://www.ipk.gatersleben.de'
			          }
			          developer {
			            name 'Matthias Lange'
			            email 'lange@ipk-gatersleben.de'
			            organization = 'IPK Gatersleben'
			            organizationUrl 'http://www.ipk.gatersleben.de'
			          }
		        }
	      	}
			}
		}
		
	}
	uploadArchives.dependsOn test
}

nexusStaging {
	if(project.hasProperty('nexusUsername') && project.hasProperty('nexusPassword')){
		stagingProfileId  = "edal_ipk_gatersleben_de"	
		username = nexusUsername
		password = nexusPassword
	}
}

release {
    failOnCommitNeeded = false
    failOnPublishNeeded = true
    failOnSnapshotDependencies = true
    failOnUnversionedFiles = true
    failOnUpdateNeeded = true
    revertOnFail = true

  	preCommitText = ''
  	preTagCommitMessage = '[gradle-release-plugin] - prepare release '
    tagCommitMessage = '[gradle-release-plugin] - creating tag: '
    newVersionCommitMessage = '[gradle-release-plugin] - prepare for next development iteration '
    
    tagTemplate = "eDAL-MetaDataAPI-"+'$version'
    versionPropertyFile = 'gradle.properties'
    versionProperties = []
    buildTasks = []
   
    scmAdapters = [
        net.researchgate.release.GitAdapter
    ]

    git {
        requireBranch = 'master'
        pushToRemote = 'origin'
        pushToBranchPrefix = ''
        commitVersionFileOnly = false
        signTag = false
    }
}

project.tasks.afterReleaseBuild.dependsOn project.getSubprojects().collect({it.getTasks().getByName("uploadArchives")})

//API Project specific stuff
project(':eDAL-MetaDataAPI') {	
 	dependencies {
	   
	    compile group: 'commons-io', name: 'commons-io', version:'2.6'
	    compile group: 'org.aspectj', name: 'aspectjrt', version: aspectjVersion
	    compile group: 'com.h2database', name: 'h2', version:'1.4.199'
	    compile group: 'org.hibernate', name: 'hibernate-core', version:'5.4.2.Final'
	    compile group: 'org.hibernate', name: 'hibernate-search-orm', version:'5.10.4.Final'
	 	compile group: 'org.hibernate', name: 'hibernate-jcache', version:'5.4.2.Final'
	    compile group: 'org.hibernate', name: 'hibernate-c3p0', version:'5.4.2.Final'
	 	compile group: 'org.ehcache', name: 'ehcache', version:'3.6.1'
	
	    compile group: 'org.apache.velocity', name: 'velocity-engine-core', version:'2.0'
	    compile group: 'org.apache.commons', name: 'commons-lang3', version:'3.8.1'
	    compile group: 'com.sun.mail', name: 'javax.mail', version:'1.5.4'
	    compile group: 'org.quartz-scheduler', name: 'quartz', version:'2.3.0'
	    compile group: 'org.eclipse.jetty', name: 'jetty-server', version: jettyVersion
	    compile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: jettyVersion
	    compile group: 'org.eclipse.jetty.http2', name: 'http2-server', version: jettyVersion
	  	compile group: 'org.eclipse.jetty.http2', name: 'http2-common', version: jettyVersion
	    compile group: 'org.eclipse.jetty', name: 'jetty-alpn-conscrypt-server', version: jettyVersion	    
	    compile group: 'org.eclipse.jetty', name: 'jetty-alpn-java-server', version: jettyVersion	    
	    
	    compile group: 'com.googlecode.json-simple', name: 'json-simple', version:'1.1.1'
	   
	   	compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.11.1'
	    compile group: 'org.apache.logging.log4j', name: 'log4j-1.2-api', version: '2.11.1'
	    
	    compile group: 'com.maxmind.geoip2', name: 'geoip2', version:'2.12.0'
	    compile group: 'org.apache.tika', name: 'tika-core', version:'1.19.1'
	    compile group: 'com.github.markusbernhardt', name: 'proxy-vole', version:'1.0.5'
	   
	    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junitVersion
	   	testRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junitVersion
	    	   	
	   	compile group: 'org.glassfish.jersey.connectors', name: 'jersey-apache-connector', version: jerseyVersion
	    compile group: 'org.glassfish.jersey.core', name: 'jersey-client', version: jerseyVersion
	    compile group: 'org.glassfish.jersey.core', name: 'jersey-server', version: jerseyVersion
	    compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-servlet', version: jerseyVersion
     	compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-jetty-http', version: jerseyVersion
     	compile group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: jerseyVersion
     	compile group: 'org.glassfish.jersey.media', name: 'jersey-media-multipart', version: jerseyVersion	 
     	compile group: 'org.glassfish.jersey.security', name: 'oauth2-client', version: jerseyVersion

		compile group: 'javax.xml.bind', name: 'jaxb-api', version:'2.3.1'	 
     	compile group: 'com.sun.xml.bind', name: 'jaxb-core', version:'2.3.0.1'	 
     	compile group: 'com.sun.xml.bind', name: 'jaxb-impl', version:'2.3.1'	 
     	compile group: 'javax.activation', name: 'activation', version:'1.1.1'	
	}
}

//Server Project specific stuff
project(':eDAL-MetaDataAPI-Server') {
	dependencies {
		compile project(':eDAL-MetaDataAPI')
	    compile group: 'commons-cli', name: 'commons-cli', version:'1.4'
	   	compile group: 'com.healthmarketscience.rmiio', name: 'rmiio', version:'2.1.2'
	}
	apply plugin: 'com.github.johnrengelman.shadow'

task shadowJarServer(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
	group = "shadow"
	classifier = 'jar-with-dependencies'
	description = "eDAL-Server"
	exclude '*.p12'
	
	mergeServiceFiles()
	 
	manifest {
        attributes 	'Main-Class':'de.ipk_gatersleben.bit.bi.edal.rmi.server.EdalServer', 'Multi-Release':'true'
    }
	from(project.convention.getPlugin(JavaPluginConvention).sourceSets.main.output)
	configurations = [project.configurations.runtime]
	exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
}

artifacts {
	archives shadowJarServer
}
}
//Client Project specific stuff
project(':eDAL-MetaDataAPI-Client') {
	dependencies {
    	compile project(':eDAL-MetaDataAPI-Server') 
    	compile group: 'org.swinglabs.swingx', name: 'swingx-all', version:'1.6.4'
    	compile group: 'com.miglayout', name: 'miglayout-core', version:'4.2'
    	compile group: 'com.miglayout', name: 'miglayout-swing', version:'4.2'
    }
}